package com.es.query;import cn.hutool.core.util.StrUtil;import com.es.config.builder.EsQueryBuilder;import com.es.config.es.DocumentIdProcessor;import com.es.config.es.EvsSubscriptionConvertor;import com.es.config.es.SearchHitConvertor;import com.es.config.es.SubscriptionConvertor;import com.es.enums.OrderColumnEnum;import com.es.param.EsSubscriptionMatchParam;import com.es.param.EsSubscriptionQueryParam;import com.es.param.SearchSubscriptionParam;import com.es.param.result.EsSubscriptionBasicInfo;import com.es.param.result.EvsSubscriptionDocument;import com.es.param.result.PageList;import com.google.gson.Gson;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.elasticsearch.action.DocWriteRequest;import org.elasticsearch.action.get.GetRequest;import org.elasticsearch.action.index.IndexRequest;import org.elasticsearch.action.search.*;import org.elasticsearch.action.support.WriteRequest.RefreshPolicy;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.common.xcontent.XContentType;import org.elasticsearch.core.TimeValue;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.QueryBuilder;import org.elasticsearch.search.Scroll;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.FieldSortBuilder;import org.elasticsearch.search.sort.SortBuilder;import org.elasticsearch.search.sort.SortOrder;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import org.springframework.util.StringUtils;import java.io.IOException;import java.util.ArrayList;import java.util.List;/** * @author runxiu.li * @Date 2023/4/23 16:23 * @Description TODO */@Slf4j@Component@RequiredArgsConstructorpublic class EvsSubscriptionEsClientImpl implements EsQueryBuilder, EvsSubscriptionRepository {    @Value("${es.subscriptionIndex}")    private String subscriptionIndex;    private final RestHighLevelClient restHighLevelClient;    private final DocumentIdProcessor documentIdProcessor;    /**     * 通过游标查询所有数据     * <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/scroll.html">...</a>     */    public <T> List<T> searchAllData(QueryBuilder query, String[] queryFields, List<FieldSortBuilder> sorts,                                     SearchHitConvertor<T> convertor) {        List<T> tList = new ArrayList<>();        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).fetchSource(queryFields, null);        if (sorts != null) {            sorts.forEach(searchSourceBuilder::sort);        }        SearchRequest searchRequest =                new SearchRequest().indices(subscriptionIndex).source(searchSourceBuilder);        final Scroll scroll = new Scroll(TimeValue.timeValueSeconds(2L));        searchRequest.scroll(scroll);        try {            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);            String scrollId = searchResponse.getScrollId();            log.info("ES DSL query:\nGET  {}\n{}", String.format("/%s/_search", searchRequest.indices()[0]),                    searchRequest.source());            //打印命中数量            log.info("total hits：{}", searchResponse.getHits().getTotalHits());            SearchHit[] searchHits = searchResponse.getHits().getHits();            while (searchHits != null && searchHits.length > 0) {                for (int i = 0; i < searchHits.length; i++) {                    tList.add(convertor.convert(searchHits[i]));                }                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);                scrollRequest.scroll(scroll);                searchResponse = restHighLevelClient.scroll(scrollRequest, RequestOptions.DEFAULT);                searchHits = searchResponse.getHits().getHits();            }            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();            clearScrollRequest.addScrollId(scrollId);            //清除滚动id            ClearScrollResponse clearScrollResponse = restHighLevelClient.clearScroll(clearScrollRequest,                    RequestOptions.DEFAULT);            boolean succeeded = clearScrollResponse.isSucceeded();            if (!succeeded) {                log.error("EvsSubscriptionEsClientImpl clearScroll failed");            }        } catch (Exception e) {            log.error("EvsSubscriptionEsClientImpl   error", e);        }        return tList;    }    public <T> PageList<T> query(EsSubscriptionQueryParam esQueryParam, SearchHitConvertor<T> convertor,                                 List<SortBuilder> sortBuilders) {        try {            // 构造ES查询条件            BoolQueryBuilder queryBuilder = new BoolQueryBuilder();            wrapSubscriptionQueryBuilder(esQueryParam, queryBuilder);            if (CollectionUtils.isEmpty(sortBuilders)) {                sortBuilders = new ArrayList<>();                sortBuilders.add(new FieldSortBuilder(esQueryParam.getSortField()).order(SortOrder.fromString(esQueryParam.getSortOrder())));            }            // 查询ES            return query(queryBuilder, null, sortBuilders,                    esQueryParam.getOffset(), esQueryParam.getLimit(), convertor, subscriptionIndex);        } catch (Exception e) {            log.error("call es error.", e);            throw new RuntimeException("call es error.");        }    }    public <T> PageList<T> query(QueryBuilder query, String[] queryFields,                                 List<SortBuilder> sorts, Integer offset, Integer limit,                                 SearchHitConvertor<T> convertor, String index) throws IOException {        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder()                .query(query)                .fetchSource(queryFields, null);        if (sorts != null) {            sorts.forEach(searchSourceBuilder::sort);        }        if (offset != null) {            searchSourceBuilder.from(offset);        }        if (limit != null) {            searchSourceBuilder.size(limit);        }        SearchRequest request = new SearchRequest()                .indices(index)                .source(searchSourceBuilder);        SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);        SearchHit[] searchHits = response.getHits().getHits();        long total = response.getHits().getTotalHits().value;        List<T> items = new ArrayList<>(searchHits.length);        for (int i = 0; i < searchHits.length; i++) {            items.add(convertor.convert(searchHits[i]));        }        return PageList.of(total, items);    }    @Override    public PageList<EvsSubscriptionDocument> queryEvsSubscription(SearchSubscriptionParam param, boolean isMatch) throws IllegalAccessException {        return queryEvsSubscriptionDocument(param, isMatch);    }    @Override    public PageList<EvsSubscriptionDocument> queryEvsSubscriptionDocument(SearchSubscriptionParam param, boolean isMatch) {        List<SortBuilder> sortBuilders = new ArrayList<>();        sortBuilders.add(                new FieldSortBuilder(OrderColumnEnum.of(param.getOrderColumn()).getColumn()).order(SortOrder.fromString(param.getOrderAsc())));        //需要把EvsSubscriptionDocument转成入参的形式 也就是详情的接口        return query(isMatch ? EsSubscriptionMatchParam.of(param) : EsSubscriptionQueryParam.of(param),                EvsSubscriptionConvertor.getInstance(),                sortBuilders);    }    @Override    public List<EsSubscriptionBasicInfo> searchAllSubscriptionNos(SearchSubscriptionParam param) {        List<FieldSortBuilder> sortBuilders = new ArrayList<>();        sortBuilders.add(                new FieldSortBuilder(OrderColumnEnum.of(param.getOrderColumn()).getColumn()).order(SortOrder.fromString(param.getOrderAsc())));        // 构造ES查询条件        BoolQueryBuilder queryBuilder = new BoolQueryBuilder();        try {            wrapSubscriptionQueryBuilder(EsSubscriptionMatchParam.of(param), queryBuilder);        } catch (IllegalAccessException e) {            //打印日志，返回错误            return null;        }        return searchAllData(queryBuilder,                new String[]{"subscription_info.subscription_no", "subscription_info.subscriber_account_id", "subscription_info.subscription_name"},                sortBuilders, SubscriptionConvertor.getInstance());    }    /**     * 索引新文档（删除更新）     *     * @param document     * @throws IOException     */    @Override    public void insertOrUpdateDocument(EvsSubscriptionDocument document) {        if (document == null || document.getSubscriptionInfo() == null || StrUtil.isBlank(                document.getSubscriptionInfo().getSubscriptionNo())) {            log.error("no subscriptionNo in basic_info");            return;        }        String subscriptionNo = document.getSubscriptionInfo().getSubscriptionNo();        String docId = documentIdProcessor.genDocId(subscriptionNo);        String json = new Gson().toJson(document);        IndexRequest indexRequest = new IndexRequest(subscriptionIndex).id(docId).source(json,                XContentType.JSON);        try {            if (!exist(docId)) {                indexRequest.opType(DocWriteRequest.OpType.CREATE);            }            indexRequest.setRefreshPolicy(RefreshPolicy.IMMEDIATE);            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);        } catch (IOException e) {            log.error("insertOrUpdateDocument failed,call es failed");        }    }    /**     * 判断docId是否存在     *     * @param docId     * @return     * @throws IOException     */    private boolean exist(String docId) throws IOException {        GetRequest getRequest = new GetRequest(subscriptionIndex).id(docId);        return restHighLevelClient.exists(getRequest, RequestOptions.DEFAULT);    }}