package com.es.config.builder;import com.es.config.annotion.ESDocField;import org.apache.lucene.search.join.ScoreMode;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.NestedQueryBuilder;import org.elasticsearch.index.query.QueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.script.Script;import org.elasticsearch.script.ScriptType;import org.springframework.util.CollectionUtils;import org.springframework.util.ObjectUtils;import java.lang.reflect.Field;import java.util.Collections;import java.util.List;/** * 公用的es builder构造器 * 车辆所有的配置都有。只有选配存在没有的情况 */public interface EsQueryBuilder {    /**     * 构建es的查询语句     * @param param     * @param boolQueryBuilder     * @param <T>     * @throws IllegalAccessException     */    default <T> void wrapSubscriptionQueryBuilder(T param, BoolQueryBuilder boolQueryBuilder) throws IllegalAccessException {        //需要同时获取当前类和父类中的数据        Field[] fields = getAllFields(param.getClass());        for (Field field : fields) {            field.setAccessible(true);            ESDocField esDocField = field.getDeclaredAnnotation(ESDocField.class);            Object value = field.get(param);            if (null != esDocField) {                //解析注解的属性                if (esDocField.range().isEmpty()) {                    if (esDocField.isPlural()) {                        wrapListMustTermsQuery((List<? extends Object>) value, boolQueryBuilder, esDocField);                    } else {                        //反选的都是单个的                        wrapMustTermsQuery(value, boolQueryBuilder, esDocField);                    }                } else if (esDocField.range().isStart()) {                    boolQueryBuilder.must(QueryBuilders.rangeQuery(esDocField.fieldName()).from(value));                } else if (esDocField.range().isEnd()) {                    boolQueryBuilder.must(QueryBuilders.rangeQuery(esDocField.fieldName()).to(value));                } else if (esDocField.range().isDesignate()) {                    if (null != value) {                        //此处写的不是很通用（from to不通用了） 需要在搞一搞                        NestedQueryBuilder nestedQueryBuilder = QueryBuilders.nestedQuery(esDocField.fieldName(), QueryBuilders.boolQuery()                                        .must(QueryBuilders.rangeQuery(esDocField.fieldName() + ".from").lte(value))                                        .must(QueryBuilders.rangeQuery(esDocField.fieldName() + ".to").gt(value)),                                ScoreMode.None);                        boolQueryBuilder.must(nestedQueryBuilder);                    }                }            }        }    }    // 递归获取当前类和所有父类的字段    private static Field[] getAllFields(Class<?> clazz) {        if (clazz == null) {            return new Field[0];        }        Field[] currentClassFields = clazz.getDeclaredFields();        Class<?> superClass = clazz.getSuperclass();        Field[] parentClassFields = getAllFields(superClass);        int totalFields = currentClassFields.length + parentClassFields.length;        Field[] allFields = new Field[totalFields];        System.arraycopy(currentClassFields, 0, allFields, 0, currentClassFields.length);        System.arraycopy(parentClassFields, 0, allFields, currentClassFields.length, parentClassFields.length);        return allFields;    }    /**     * @param list     * @param boolQueryBuilder     * @param esDocField     * @param <T>     */    default <T> void wrapListMustTermsQuery(List<T> list, BoolQueryBuilder boolQueryBuilder, ESDocField esDocField) {        if (CollectionUtils.isEmpty(list)) {            if (esDocField.isInverse()) {                boolQueryBuilder.must(                        QueryBuilders.scriptQuery(new Script(                                ScriptType.INLINE,                                "painless",                                "if (!doc.containsKey('" + esDocField.fieldName() + "')) { return true; }" +                                        "def fieldValues = doc['" + esDocField.fieldName() + "'].size() == 0 ? [] : doc['" + esDocField.fieldName() + "'].stream().map(v -> v == null ? '0' : v).collect(Collectors.toList()); " +                                        "return fieldValues.size() == 0 || fieldValues.stream().allMatch(value -> value == '0');",                                Collections.emptyMap()                        ))                );            }        } else {            if (esDocField.isCanBeEmpty()) {                BoolQueryBuilder shouldBuilder = new BoolQueryBuilder();                for (T var1 : list) {                    QueryBuilder queryBuilder = QueryBuilders.termsQuery(esDocField.fieldName(), var1);                    shouldBuilder.should(queryBuilder);                    shouldBuilder.should(QueryBuilders.boolQuery()                            .mustNot(QueryBuilders.existsQuery(esDocField.fieldName())));                }                boolQueryBuilder.must(shouldBuilder);            } else {                BoolQueryBuilder shouldBuilder = new BoolQueryBuilder();                for (T var1 : list) {                    QueryBuilder queryBuilder = QueryBuilders.termsQuery(esDocField.fieldName(), var1);                    shouldBuilder.should(queryBuilder);                }                boolQueryBuilder.must(shouldBuilder);            }        }    }    /**     * 如果param为空，且是反选：那么就为0，或者字段不存在(不限)     * 非反选：     * 如果param不为空，那么需要过滤出来：不限和为特定值     *     * @param param     * @param boolQueryBuilder     * @param esDocField     * @param <T>     */    default <T> void wrapMustTermsQuery(T param, BoolQueryBuilder boolQueryBuilder, ESDocField esDocField) {        //如果值为空的情况        if (ObjectUtils.isEmpty(param)) {            if (esDocField.isInverse()) {                boolQueryBuilder.must(QueryBuilders.boolQuery()                        .should(QueryBuilders.termQuery(esDocField.fieldName(), "0"))                        .should(QueryBuilders.boolQuery()                                .mustNot(QueryBuilders.existsQuery(esDocField.fieldName()))));            }        } else {            if (esDocField.isCanBeEmpty()) {                boolQueryBuilder.must(QueryBuilders.boolQuery()                        .should(QueryBuilders.termQuery(esDocField.fieldName(), param))                        .should(QueryBuilders.boolQuery()                                .mustNot(QueryBuilders.existsQuery(esDocField.fieldName()))));            } else {                boolQueryBuilder.must(QueryBuilders.termQuery(esDocField.fieldName(), param));            }        }    }    /**     * 特殊化处理接口，默认为空，可按需override     *     * @param param     * @param boolQueryBuilder     * @param <T>     */    default <T> void wrapQueryBuilderCustom(T param, BoolQueryBuilder boolQueryBuilder) {    }}